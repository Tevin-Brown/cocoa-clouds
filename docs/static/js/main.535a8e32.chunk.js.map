{"version":3,"sources":["serviceWorker.ts","appContext.tsx","components/NavigationBar/styles.ts","assets/images/Logo.png","router/routes.ts","components/NavigationBar/index.tsx","components/Card/styles.ts","components/Card/index.tsx","pages/Home/index.tsx","components/Footer/styles.ts","components/Footer/index.tsx","pages/Satallites/Satellites.tsx","services/serviceHook.tsx","pages/Satallites/satelliteContext.tsx","pages/gfs.tsx","router/AppRouter.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","config","undefined","AppStateContext","React","createContext","AppDispatchContext","AppReducer","state","action","newState","type","data","Error","AppProvider","children","useReducer","dispatch","Provider","value","useAppState","context","useContext","navigationBarContainer","css","logoContainer","navigationLink","activeNavigationLink","routes","NavigationBar","className","src","logo","width","height","exact","to","activeClassName","cardContainer","Card","styleOverrides","style","centeredContainer","Home","footerContainer","Footer","satelliteContainer","image","imageContainer","satelliteLinkContainer","satelliteLink","satelliteLinkActive","button","routeMap","color_IR","color_WV","withRouter","history","satelliteService","useMemo","getSattelliteDirectories","a","axios","get","API_BASE_URL","getDirectoryFiles","directory","getImage","filename","responseType","useService","useState","images","setImages","imageIndex","setImageIndex","img","useRef","hash","slice","imageClick","cmd","length","useEffect","Object","keys","includes","then","res","reader","FileReader","readAsDataURL","onload","imageDataUrl","result","current","setAttribute","entries","map","key","onClick","route","push","click","ref","ABI_GeoColor","ABI_TrueColor","SatelliteStateContext","SatelliteDispatchContext","SatelliteReducer","directoryName","directories","SatelliteProvider","GFS","ind","index","setIndex","self","id","appContainer","AppRouter","appDispatch","useAppDispatch","Axios","process","path","component","Satellites","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.535a8e32.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {\n  State,\n  AppProviderProps,\n  Action,\n  Dispatch,\n} from './appContext.definitions';\n\nconst initialState: State = {\n  config: undefined,\n};\n\nconst AppStateContext = React.createContext<State | undefined>(undefined);\n\nconst AppDispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\nconst AppReducer = (state: State, action: Action) => {\n  const newState = {...state};\n  switch (action.type) {\n    case 'setConfig': {\n      newState.config = action.data;\n      return newState;\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action}`);\n    }\n  }\n};\n\nconst AppProvider = ({children}: AppProviderProps) => {\n  const [state, dispatch] = React.useReducer(AppReducer, initialState);\n  return (\n    <AppStateContext.Provider value={state}>\n      <AppDispatchContext.Provider value={dispatch}>\n        {children}\n      </AppDispatchContext.Provider>\n    </AppStateContext.Provider>\n  );\n};\n\nconst useAppState = () => {\n  const context = React.useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error('useAppState must be used within a AppProvider');\n  }\n  return context;\n};\n\nconst useAppDispatch = () => {\n  const context = React.useContext(AppDispatchContext);\n  if (context === undefined) {\n    throw new Error('useAppDispatch must be used within a AppProvider');\n  }\n  return context;\n};\nexport {AppProvider, useAppState, useAppDispatch};\n","import {css} from 'emotion';\n\nexport const navigationBarContainer = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100px;\n  box-shadow: 2px 0 5px 0px #888;\n  background: #efebff;\n  box-sizing: border-box;\n`;\n\nexport const logoContainer = css`\n  box-sizing: border-box;\n  margin: 0px 10px;\n`;\n\nexport const navigationLink = css`\n  color: black;\n  outline: none;\n  text-decoration: none;\n  font-size: 20px;\n  font-weight: 500;\n  padding: 0px 10px;\n`;\nexport const activeNavigationLink = css`\n  ${navigationLink};\n  color: #3cacae;\n`;\n","export default __webpack_public_path__ + \"static/media/Logo.5df60505.png\";","export const routes = {\n    home: \"/\",\n    satellites:\"/satellites\",\n    waterVapor:\"/satellites/water-vapor\",\n    about:\"/about\",\n    gfs:\"/gfs\"\n}","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport {\n  navigationBarContainer,\n  navigationLink,\n  logoContainer,\n  activeNavigationLink,\n} from './styles';\nimport logo from '../../assets/images/Logo.png';\nimport { routes } from '../../router/routes';\n\nconst NavigationBar = () => {\n  return (\n    <div className={navigationBarContainer}>\n      <div className={logoContainer}>\n        <img src={logo} width=\"60px\" height=\"50px\" />\n      </div>\n      <NavLink\n        exact\n        to={routes.home}\n        className={navigationLink}\n        activeClassName={activeNavigationLink}\n      >\n        Home\n      </NavLink>\n      <NavLink\n        to={routes.gfs}\n        className={navigationLink}\n        activeClassName={activeNavigationLink}\n      >\n        GFS\n      </NavLink>\n      <NavLink\n        to={routes.satellites}\n        className={navigationLink}\n        activeClassName={activeNavigationLink}\n      >\n        Satellite Imagery\n      </NavLink>\n    </div>\n  );\n};\n\nexport default NavigationBar;\n","import {css} from 'emotion';\n\nexport const cardContainer = css`\n  background: #ffffff;\n  box-shadow: 0px 1px 10px 0px #888;\n  box-sizing: border-box;\n  padding: 25px;\n`;\n","import React, {ReactNode} from 'react';\nimport {cardContainer} from './styles';\ninterface CardProps {\n  styleOverrides?: {};\n  children?: ReactNode;\n}\n\nconst Card: React.FC = ({styleOverrides, children}: CardProps) => {\n  return (\n    <div className={cardContainer} style={styleOverrides}>\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport {css} from 'emotion';\nimport Card from '../../components/Card';\nconst centeredContainer = css`\n  display: flex;\n  flex-flow: row wrap;\n  flex-direction: column;\n  width: 80vw;\n  min-height: calc(100vh - 250px);\n  box-sizing: border-box;\n  margin: 25px auto;\n`;\n\nconst Home: React.FC = () => {\n  return (\n    <div className={centeredContainer}>\n      <Card>Home</Card>\n    </div>\n  );\n};\n\nexport default Home;\n","import {css} from 'emotion';\n\nexport const footerContainer = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100px;\n  box-shadow: 2px 0 5px 0px #888;\n  background: #efebff;\n  box-sizing: border-box;\n  color: #888;\n`;\n","import React from 'react';\nimport {footerContainer} from './styles';\n\nconst Footer = () => {\n  return (\n    <div className={footerContainer}>\n      <span>Copyright Tevin Brown</span>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, {useEffect, useRef, useState} from 'react';\nimport {css} from 'emotion';\nimport { useService } from '../../services/serviceHook';\nimport {RouteComponentProps, withRouter } from 'react-router-dom';\nimport { routes } from '../../router/routes';\n\nconst satelliteContainer = css`\n  display: flex;\n  flex-flow: row wrap;\n  flex-direction: column;\n  align-items: center;\n  width: 100vw;\n  min-height: 100vh;\n  box-sizing: border-box;\n`;\n\nconst image = css`\n  max-width:75%;\n  max-height:75%;\n`;\n\nconst imageContainer = css`\n  display: flex;\n  flex-flow: row wrap;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst satelliteLinkContainer = css`\n  display: flex;\n`;\n\nconst satelliteLink = css`\n  margin:8px;\n  &:hover {\n    cursor: pointer;\n    color: gray;\n  }\n`;\n\nconst satelliteLinkActive = css`\n  margin:8px;\n  color:blue;\n  &:hover {\n    cursor: pointer;\n    color: gray;\n  }\n`;\n\nconst button = css`\n  margin: 8px;\n`\n\nexport const routeMap:SatelliteDirectories = {\n  color_IR: 'Infared',\n  color_WV: 'Water Vapor',\n};\n\nexport interface SatelliteDirectories {\n  color_IR: string;\n  color_WV: string;\n}\n\nconst Satellites = ({location, history}:RouteComponentProps) => {\n  const {satelliteService} = useService()\n  const [images, setImages] = useState<string[]>()\n  const [imageIndex, setImageIndex] = useState<number>(0)\n  const img = useRef<HTMLImageElement>(null)\n  const directory = location.hash.slice(1)\n\n  const click = (key: keyof SatelliteDirectories) => {\n    var route = `${routes.satellites}#${key}`\n    history.push(route)\n  }\n\n  const imageClick = (cmd: 'previous' | 'next') => {\n    switch (cmd) {\n      case 'next':\n        if (images && (images?.length > imageIndex)) setImageIndex(imageIndex + 1)\n        break;\n      case 'previous':\n        if (imageIndex>0) setImageIndex(imageIndex - 1)\n        break;\n    }\n\n  }\n  \n  useEffect(() => {\n    if (Object.keys(routeMap).includes(directory)){\n      satelliteService.getDirectoryFiles(directory as keyof SatelliteDirectories).then(res => {\n        setImages(res.data.data);\n        setImageIndex(0);\n      })\n    }\n  }, [location]);\n\n  useEffect(()=>{\n    if(images){\n      satelliteService.getImage(directory,images[imageIndex]).then(res => {\n        var reader = new window.FileReader();\n        reader.readAsDataURL(res.data); \n        reader.onload = function() {\n\n            var imageDataUrl = reader.result as string;\n            img.current?.setAttribute(\"src\", imageDataUrl);\n\n        }\n      })\n    }\n  },[imageIndex,images])\n  \n  return (\n    <div className={satelliteContainer}>\n      <div className={satelliteLinkContainer}>\n        {Object.entries(routeMap).map(([key,value]) =>\n          <div className={directory===key ? satelliteLinkActive : satelliteLink} onClick={()=>click(key as keyof SatelliteDirectories)}>\n            {value}\n          </div>\n        )}\n      </div>\n      <div className={imageContainer}>\n          <img className={image} ref={img}/>\n          <div>\n            <button onClick={()=>imageClick('previous')} className={button}>Previous</button>\n            <button onClick={ ()=>imageClick('next')} className={button}>Next</button>\n          </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(Satellites);\n","import axios from 'axios';\nimport React, { useMemo } from 'react'\nimport { useAppState } from '../appContext';\nimport { SatelliteDirectories } from '../pages/Satallites/Satellites';\n\nexport const useService = () => {\n    const {config} = useAppState()\n\n    return useMemo(\n        () => ({\n          satelliteService: {\n            getSattelliteDirectories: async () =>\n                axios.get(config?.API_BASE_URL + '/satellites/list/all'),\n            getDirectoryFiles: async (directory: keyof SatelliteDirectories)  =>\n                axios.get(config?.API_BASE_URL + '/satellites/list/' + directory),\n            getImage: async (directory:string, filename:string) => \n                axios.get(`${config?.API_BASE_URL}/satellites/${directory}/${filename}`, { responseType:\"blob\" })\n          },\n        }),\n        [config],\n      );\n}","import React from 'react';\n\ntype Action =\n  | DirectoryAction\n\ninterface DirectoryAction {\n  type: 'setDirectory';\n  data: {directoryName: keyof State ,directories:string[]};\n}\n\ntype Dispatch = (action: Action) => void;\n\ntype SatelliteProviderProps = {children: React.ReactNode};\n\ninterface State {\n    ABI_GeoColor: string[],\n    ABI_TrueColor: string[],\n    color_IR: string[],\n    color_WV: string[],\n}\n\nconst initialState: State = {\n    ABI_GeoColor: [],\n    ABI_TrueColor: [],\n    color_IR: [],\n    color_WV: [],\n};\n\nconst SatelliteStateContext = React.createContext<State | undefined>(undefined);\n\nconst SatelliteDispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\nconst SatelliteReducer = (state: State, action: Action) => {\n  const newState = {...state};\n  switch (action.type) {\n    case 'setDirectory': {\n      newState[action.data.directoryName] = action.data.directories;\n      return newState;\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action}`);\n    }\n  }\n};\n\nconst SatelliteProvider = ({children}: SatelliteProviderProps) => {\n  const [state, dispatch] = React.useReducer(SatelliteReducer, initialState);\n  return (\n    <SatelliteStateContext.Provider value={state}>\n      <SatelliteDispatchContext.Provider value={dispatch}>\n        {children}\n      </SatelliteDispatchContext.Provider>\n    </SatelliteStateContext.Provider>\n  );\n};\n\nconst useSatelliteState = () => {\n  const context = React.useContext(SatelliteStateContext);\n  if (context === undefined) {\n    throw new Error('useSatelliteState must be used within a SatelliteProvider');\n  }\n  return context;\n};\n\nconst useSatelliteDispatch = () => {\n  const context = React.useContext(SatelliteDispatchContext);\n  if (context === undefined) {\n    throw new Error('useSatelliteDispatch must be used within a SatelliteProvider');\n  }\n  return context;\n};\nexport {SatelliteProvider, useSatelliteState, useSatelliteDispatch};\n","\nimport { css } from 'emotion';\nimport React, { useState } from 'react';\n\nconst centeredContainer = css`\n  display: flex;\n  flex-direction: column;\n  justify-content:center;\n  width: 100vw;\n  box-sizing: border-box;\n  margin: 25px 50px;\n`;\n\nconst GFS: React.FC = () => {\n    const [index, setIndex]= useState<number>(1)\n    \n    const indexToString = (ind: number) => {\n        if (ind<10){\n            return '00' + ind\n        }\n        if (ind<100){\n            return '0' + ind\n        }\n        return ind\n    }\n\n    const back = () => {\n        if (index > 1){\n            setIndex(self => self-1);\n        }\n    }\n    const forward = () => {\n        if (index < 120){\n            setIndex(self => self+1);\n        }\n    }\n    \n  return (\n    <div className={centeredContainer}>\n        <h2>This is the page to showcase the GFS model.</h2>\n        <div className='button-container'>\n            <button onClick={back}>Back</button>\n            <button onClick={forward}>Forward</button>\n        </div>\n        <div>\n            <img id='gfs-image' width=\"70%\" src={`http://mag.ncep.noaa.gov/data/gfs/12/namer/sim_radar_comp/gfs_namer_${indexToString(index)}_sim_radar_comp.gif`}/>\n        </div>\n    </div>\n  );\n};\n\nexport default GFS;","import React, {useEffect} from 'react';\nimport {css} from 'emotion';\nimport {Switch, Route, HashRouter as Router} from 'react-router-dom';\nimport NavigationBar from '../components/NavigationBar';\nimport Home from '../pages/Home';\nimport Footer from '../components/Footer';\nimport Satellites from '../pages/Satallites/Satellites';\nimport { useAppDispatch, useAppState } from '../appContext';\nimport { AppConfig } from '../appContext.definitions';\nimport Axios from 'axios';\nimport { SatelliteProvider } from '../pages/Satallites/satelliteContext';\nimport { routes } from './routes';\nimport GFS from '../pages/gfs';\n\nconst appContainer = css`\n  background: #eeeeee;\n`;\n\nexport const AppRouter: React.FC = () => {\n  const {config} = useAppState()\n  const appDispatch = useAppDispatch()\n  \n  useEffect(()=>{\n    if (!config) {\n      Axios.get<AppConfig>(`${process.env.PUBLIC_URL}/config.json`)\n        .then((res) => {\n            appDispatch({type: 'setConfig', data:res.data});\n        })\n    }\n  }, [])\n\n  return (<>\n    {config && (<Router>\n      <div className={appContainer}>\n        <NavigationBar />\n        <Switch>\n          <Route exact path={routes.home} component={Home} />\n          <Route path={routes.about}>\n            <div>About</div>\n          </Route>\n            <Route exact path={routes.gfs} component={GFS} />\n          <SatelliteProvider>\n            <Route exact path={routes.satellites} component={Satellites} />\n          </SatelliteProvider>\n          <Route>\n            <div>This page was not found</div>\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>)}\n    </>\n  );\n};\n","import React from 'react'\nimport { AppProvider } from './appContext'\nimport { AppRouter } from './router/AppRouter'\n\nconst App = () => <AppProvider><AppRouter/></AppProvider>\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}