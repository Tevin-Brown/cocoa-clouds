{"version":3,"sources":["serviceWorker.ts","appContext.tsx","components/NavigationBar/styles.ts","router/routes.ts","components/NavigationBar/index.tsx","pages/Home/index.tsx","components/Footer/index.tsx","pages/Satallites/Satellites.tsx","services/serviceHook.tsx","pages/Satallites/satelliteContext.tsx","pages/gfs.tsx","router/AppRouter.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","config","undefined","AppStateContext","React","createContext","AppDispatchContext","AppReducer","state","action","newState","type","data","Error","AppProvider","children","useReducer","dispatch","Provider","value","useAppState","context","useContext","navigationLink","css","activeNavigationLink","routes","NavigationBar","className","role","aria-label","to","aria-expanded","data-target","aria-hidden","activeClassName","centeredContainer","Home","Footer","satelliteContainer","image","imageContainer","headerText","button","Satellites","directory","satelliteService","useMemo","getSattelliteDirectories","a","axios","get","API_BASE_URL","getDirectoryFiles","getImage","filename","responseType","useService","useState","images","setImages","imageIndex","setImageIndex","img","useRef","imageClick","cmd","length","useEffect","then","res","reader","FileReader","readAsDataURL","onload","imageDataUrl","result","current","setAttribute","ref","onClick","ABI_GeoColor","ABI_TrueColor","color_IR","color_WV","SatelliteStateContext","SatelliteDispatchContext","SatelliteReducer","directoryName","directories","SatelliteProvider","GFS","ind","index","setIndex","self","id","width","src","appContainer","AppRouter","appDispatch","useAppDispatch","Axios","process","exact","path","component","render","App","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59a3c34f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {\n  State,\n  AppProviderProps,\n  Action,\n  Dispatch,\n} from './appContext.definitions';\n\nconst initialState: State = {\n  config: undefined,\n};\n\nconst AppStateContext = React.createContext<State | undefined>(undefined);\n\nconst AppDispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\nconst AppReducer = (state: State, action: Action) => {\n  const newState = {...state};\n  switch (action.type) {\n    case 'setConfig': {\n      newState.config = action.data;\n      return newState;\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action}`);\n    }\n  }\n};\n\nconst AppProvider = ({children}: AppProviderProps) => {\n  const [state, dispatch] = React.useReducer(AppReducer, initialState);\n  return (\n    <AppStateContext.Provider value={state}>\n      <AppDispatchContext.Provider value={dispatch}>\n        {children}\n      </AppDispatchContext.Provider>\n    </AppStateContext.Provider>\n  );\n};\n\nconst useAppState = () => {\n  const context = React.useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error('useAppState must be used within a AppProvider');\n  }\n  return context;\n};\n\nconst useAppDispatch = () => {\n  const context = React.useContext(AppDispatchContext);\n  if (context === undefined) {\n    throw new Error('useAppDispatch must be used within a AppProvider');\n  }\n  return context;\n};\nexport {AppProvider, useAppState, useAppDispatch};\n","import {css} from 'emotion';\n\nexport const navigationBarContainer = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100px;\n  box-shadow: 2px 0 5px 0px #888;\n  background: #efebff;\n  box-sizing: border-box;\n`;\n\nexport const logoContainer = css`\n  box-sizing: border-box;\n  margin: 0px 10px;\n`;\n\nexport const navigationLink = css`\n  color: black;\n  outline: none;\n  text-decoration: none;\n  padding: 0px 10px;\n`;\nexport const activeNavigationLink = css`\n  ${navigationLink};\n  color: #3cacae;\n`;\n","export const routes = {\n    home: \"/\",\n    satellites:\"/satellites\",\n    satellitesIR:\"/satellites/infared\",\n    satellitesWV:\"/satellites/water-vapor\",\n    about:\"/about\",\n    gfs:\"/gfs\"\n}","import React from 'react';\nimport {Link, NavLink} from 'react-router-dom';\nimport {\n  navigationLink,\n  activeNavigationLink,\n} from './styles';\nimport { routes } from '../../router/routes';\n\nconst NavigationBar = () => {\n  return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n      <div className=\"navbar-item\">\n          <Link\n            to={routes.home}\n            className={navigationLink}\n          >\n            Cocoa Clouds\n          </Link>\n        </div>\n\n        <a role=\"button\" className=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </a>\n      </div>\n    <div className=\"navbar-menu\">\n      <div className=\"navbar-start\">\n        <div className=\"navbar-item\">\n          <NavLink\n            to={routes.gfs}\n            className={navigationLink}\n            activeClassName={activeNavigationLink}\n          >\n            GFS\n          </NavLink>\n        </div>\n\n        <div className=\"navbar-item has-dropdown is-hoverable\">\n          <div className=\"navbar-link\">\n            <div\n              className={navigationLink}\n            >\n              Satellite Imagery\n            </div>\n          </div>\n\n          <div className=\"navbar-dropdown\">\n            <a className=\"navbar-item\">\n              <Link\n                to={routes.satellitesIR}\n                className={navigationLink}\n              >\n                Infared\n              </Link>\n            </a>\n            <a className=\"navbar-item\">\n              <Link\n                to={routes.satellitesWV}\n                className={navigationLink}\n              >\n                Water Vapor\n              </Link>\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </nav>\n  );\n};\n\nexport default NavigationBar;\n","import React from 'react';\nimport {css} from 'emotion';\nimport Card from '../../components/Card';\nconst centeredContainer = css`\n  display: flex;\n  flex-flow: row wrap;\n  flex-direction: column;\n  width: 80vw;\n  min-height: calc(100vh - 250px);\n  box-sizing: border-box;\n  margin: 25px auto;\n`;\n\nconst Home: React.FC = () => {\n  return (\n    <div className={centeredContainer}>\n      Home page coming soon\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport {footerContainer} from './styles';\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <span>Copyright Tevin Brown</span>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, {useEffect, useRef, useState} from 'react';\nimport {css} from 'emotion';\nimport { useService } from '../../services/serviceHook';\n\nconst satelliteContainer = css`\n  display: flex;\n  flex-flow: row wrap;\n  flex-direction: column;\n  align-items: center;\n  width: 100vw;\n  min-height: 100vh;\n  box-sizing: border-box;\n`;\n\nconst image = css`\n  max-width:75%;\n  max-height:75%;\n`;\n\nconst imageContainer = css`\n  display: flex;\n  flex-flow: row wrap;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst headerText = css`\n  font-size: 20px;\n  margin: 5px 0px;\n`;\n\nconst button = css`\n  margin: 8px;\n`\nexport interface SatelliteDirectories {\n  color_IR: string;\n  color_WV: string;\n}\n\nconst Satellites = ({directory}: {directory: keyof SatelliteDirectories}) => {\n  const {satelliteService} = useService()\n  const [images, setImages] = useState<string[]>()\n  const [imageIndex, setImageIndex] = useState<number>(0)\n  const img = useRef<HTMLImageElement>(null)\n\n  const imageClick = (cmd: 'previous' | 'next') => {\n    switch (cmd) {\n      case 'next':\n        if (images && (images?.length > imageIndex)) setImageIndex(imageIndex + 1)\n        break;\n      case 'previous':\n        if (imageIndex>0) setImageIndex(imageIndex - 1)\n        break;\n    }\n\n  }\n  \n  useEffect(() => {\n      satelliteService.getDirectoryFiles(directory).then(res => {\n        setImages(res.data.data);\n        setImageIndex(0);\n      })\n  }, []);\n\n  useEffect(()=>{\n    if(images){\n      satelliteService.getImage(directory,images[imageIndex]).then(res => {\n        var reader = new window.FileReader();\n        reader.readAsDataURL(res.data); \n        reader.onload = function() {\n\n            var imageDataUrl = reader.result as string;\n            img.current?.setAttribute(\"src\", imageDataUrl);\n\n        }\n      })\n    }\n  },[imageIndex, images])\n  \n  return (\n    <div className={satelliteContainer}>\n      <p className={headerText}>Look at these awesome satallite images!</p>\n      <div className={imageContainer}>\n          <img className={image} ref={img}/>\n          <div>\n            <button onClick={()=>imageClick('previous')} className={button}>Previous</button>\n            <button onClick={ ()=>imageClick('next')} className={button}>Next</button>\n          </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Satellites;\n","import axios from 'axios';\nimport React, { useMemo } from 'react'\nimport { useAppState } from '../appContext';\nimport { SatelliteDirectories } from '../pages/Satallites/Satellites';\n\nexport const useService = () => {\n    const {config} = useAppState()\n\n    return useMemo(\n        () => ({\n          satelliteService: {\n            getSattelliteDirectories: async () =>\n                axios.get(config?.API_BASE_URL + '/satellites/list/all'),\n            getDirectoryFiles: async (directory: keyof SatelliteDirectories)  =>\n                axios.get(config?.API_BASE_URL + '/satellites/list/' + directory),\n            getImage: async (directory:string, filename:string) => \n                axios.get(`${config?.API_BASE_URL}/satellites/${directory}/${filename}`, { responseType:\"blob\" })\n          },\n        }),\n        [config],\n      );\n}","import React from 'react';\n\ntype Action =\n  | DirectoryAction\n\ninterface DirectoryAction {\n  type: 'setDirectory';\n  data: {directoryName: keyof State ,directories:string[]};\n}\n\ntype Dispatch = (action: Action) => void;\n\ntype SatelliteProviderProps = {children: React.ReactNode};\n\ninterface State {\n    ABI_GeoColor: string[],\n    ABI_TrueColor: string[],\n    color_IR: string[],\n    color_WV: string[],\n}\n\nconst initialState: State = {\n    ABI_GeoColor: [],\n    ABI_TrueColor: [],\n    color_IR: [],\n    color_WV: [],\n};\n\nconst SatelliteStateContext = React.createContext<State | undefined>(undefined);\n\nconst SatelliteDispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\nconst SatelliteReducer = (state: State, action: Action) => {\n  const newState = {...state};\n  switch (action.type) {\n    case 'setDirectory': {\n      newState[action.data.directoryName] = action.data.directories;\n      return newState;\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action}`);\n    }\n  }\n};\n\nconst SatelliteProvider = ({children}: SatelliteProviderProps) => {\n  const [state, dispatch] = React.useReducer(SatelliteReducer, initialState);\n  return (\n    <SatelliteStateContext.Provider value={state}>\n      <SatelliteDispatchContext.Provider value={dispatch}>\n        {children}\n      </SatelliteDispatchContext.Provider>\n    </SatelliteStateContext.Provider>\n  );\n};\n\nconst useSatelliteState = () => {\n  const context = React.useContext(SatelliteStateContext);\n  if (context === undefined) {\n    throw new Error('useSatelliteState must be used within a SatelliteProvider');\n  }\n  return context;\n};\n\nconst useSatelliteDispatch = () => {\n  const context = React.useContext(SatelliteDispatchContext);\n  if (context === undefined) {\n    throw new Error('useSatelliteDispatch must be used within a SatelliteProvider');\n  }\n  return context;\n};\nexport {SatelliteProvider, useSatelliteState, useSatelliteDispatch};\n","\nimport { css } from 'emotion';\nimport React, { useState } from 'react';\n\nconst centeredContainer = css`\n  display: flex;\n  flex-direction: column;\n  justify-content:center;\n  width: 100vw;\n  box-sizing: border-box;\n  margin: 25px 50px;\n`;\n\nconst GFS: React.FC = () => {\n    const [index, setIndex]= useState<number>(1)\n    \n    const indexToString = (ind: number) => {\n        if (ind<10){\n            return '00' + ind\n        }\n        if (ind<100){\n            return '0' + ind\n        }\n        return ind\n    }\n\n    const back = () => {\n        if (index > 1){\n            setIndex(self => self-1);\n        }\n    }\n    const forward = () => {\n        if (index < 120){\n            setIndex(self => self+1);\n        }\n    }\n    \n  return (\n    <div className={centeredContainer}>\n        <h2>This is the page to showcase the GFS model.</h2>\n        <div className='button-container'>\n            <button onClick={back}>Back</button>\n            <button onClick={forward}>Forward</button>\n        </div>\n        <div>\n            <img id='gfs-image' width=\"70%\" src={`http://mag.ncep.noaa.gov/data/gfs/12/namer/sim_radar_comp/gfs_namer_${indexToString(index)}_sim_radar_comp.gif`}/>\n        </div>\n    </div>\n  );\n};\n\nexport default GFS;","import React, {useEffect} from 'react';\nimport {css} from 'emotion';\nimport {Switch, Route, HashRouter as Router} from 'react-router-dom';\nimport NavigationBar from '../components/NavigationBar';\nimport Home from '../pages/Home';\nimport Footer from '../components/Footer';\nimport Satellites from '../pages/Satallites/Satellites';\nimport { useAppDispatch, useAppState } from '../appContext';\nimport { AppConfig } from '../appContext.definitions';\nimport Axios from 'axios';\nimport { SatelliteProvider } from '../pages/Satallites/satelliteContext';\nimport { routes } from './routes';\nimport GFS from '../pages/gfs';\n\nconst appContainer = css`\n  background: #eeeeee;\n`;\n\nexport const AppRouter: React.FC = () => {\n  const {config} = useAppState()\n  const appDispatch = useAppDispatch()\n  \n  useEffect(()=>{\n    if (!config) {\n      Axios.get<AppConfig>(`${process.env.PUBLIC_URL}/config.json`)\n        .then((res) => {\n            appDispatch({type: 'setConfig', data:res.data});\n        })\n    }\n  }, [])\n\n  return (<>\n    {config && (<Router>\n      <div className={appContainer}>\n        <NavigationBar />\n        <Switch>\n          <Route exact path={routes.home} component={Home} />\n          <Route path={routes.about}>\n            <div>About</div>\n          </Route>\n            <Route exact path={routes.gfs} component={GFS} />\n          <SatelliteProvider>\n            <Route exact path={routes.satellitesIR} render={()=><Satellites directory={'color_IR'}/>} />\n            <Route exact path={routes.satellitesWV} render={()=><Satellites directory={'color_WV'}/>} />\n          </SatelliteProvider>\n          <Route>\n            <div>This page was not found</div>\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>)}\n    </>\n  );\n};\n","import React from 'react'\nimport { AppProvider } from './appContext'\nimport { AppRouter } from './router/AppRouter'\n\nconst App = () => <AppProvider><AppRouter/></AppProvider>\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport 'bulma/css/bulma.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}