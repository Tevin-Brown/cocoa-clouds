{"version":3,"sources":["assets/images/Logo.png","serviceWorker.ts","appContext.tsx","components/NavigationBar/styles.ts","router/routes.ts","components/NavigationBar/index.tsx","components/Card/styles.ts","components/Card/index.tsx","pages/Home/index.tsx","components/Footer/styles.ts","components/Footer/index.tsx","pages/Satallites/Satellites.tsx","services/serviceHook.tsx","pages/Satallites/satelliteContext.tsx","router/AppRouter.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","config","undefined","AppStateContext","React","createContext","AppDispatchContext","AppReducer","state","action","newState","type","data","Error","AppProvider","children","useReducer","dispatch","Provider","value","useAppState","context","useContext","navigationBarContainer","css","logoContainer","navigationLink","activeNavigationLink","routes","NavigationBar","className","src","logo","width","height","exact","to","activeClassName","cardContainer","Card","styleOverrides","style","centeredContainer","Home","footerContainer","Footer","satelliteContainer","image","imageContainer","satelliteLinkContainer","satelliteLink","satelliteLinkActive","button","routeMap","color_IR","color_WV","withRouter","history","satelliteService","useMemo","getSattelliteDirectories","a","async","axios","get","API_BASE_URL","getDirectoryFiles","directory","getImage","filename","responseType","useService","useState","images","setImages","imageIndex","setImageIndex","img","useRef","hash","slice","imageClick","cmd","length","useEffect","Object","keys","includes","then","res","reader","FileReader","readAsDataURL","onload","imageDataUrl","result","current","setAttribute","entries","map","key","onClick","route","push","click","ref","ABI_GeoColor","ABI_TrueColor","SatelliteStateContext","SatelliteDispatchContext","SatelliteReducer","directoryName","directories","SatelliteProvider","appContainer","AppRouter","appDispatch","useAppDispatch","Axios","origin","path","component","Satellites","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4a6ef5f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.714253c8.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {\n  State,\n  AppProviderProps,\n  Action,\n  Dispatch,\n} from './appContext.definitions';\n\nconst initialState: State = {\n  config: undefined,\n};\n\nconst AppStateContext = React.createContext<State | undefined>(undefined);\n\nconst AppDispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\nconst AppReducer = (state: State, action: Action) => {\n  const newState = {...state};\n  switch (action.type) {\n    case 'setConfig': {\n      newState.config = action.data;\n      return newState;\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action}`);\n    }\n  }\n};\n\nconst AppProvider = ({children}: AppProviderProps) => {\n  const [state, dispatch] = React.useReducer(AppReducer, initialState);\n  return (\n    <AppStateContext.Provider value={state}>\n      <AppDispatchContext.Provider value={dispatch}>\n        {children}\n      </AppDispatchContext.Provider>\n    </AppStateContext.Provider>\n  );\n};\n\nconst useAppState = () => {\n  const context = React.useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error('useAppState must be used within a AppProvider');\n  }\n  return context;\n};\n\nconst useAppDispatch = () => {\n  const context = React.useContext(AppDispatchContext);\n  if (context === undefined) {\n    throw new Error('useAppDispatch must be used within a AppProvider');\n  }\n  return context;\n};\nexport {AppProvider, useAppState, useAppDispatch};\n","import {css} from 'emotion';\n\nexport const navigationBarContainer = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100px;\n  box-shadow: 2px 0 5px 0px #888;\n  background: #efebff;\n  box-sizing: border-box;\n`;\n\nexport const logoContainer = css`\n  box-sizing: border-box;\n  margin: 0px 10px;\n`;\n\nexport const navigationLink = css`\n  color: black;\n  outline: none;\n  text-decoration: none;\n  font-size: 20px;\n  font-weight: 500;\n  padding: 0px 10px;\n`;\nexport const activeNavigationLink = css`\n  ${navigationLink};\n  color: #3cacae;\n`;\n","export const routes = {\n    home: \"/\",\n    satellites:\"/satellites\",\n    waterVapor:\"/satellites/water-vapor\",\n    about:\"/about\",\n    gfs:\"/gfs\"\n}","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport {\n  navigationBarContainer,\n  navigationLink,\n  logoContainer,\n  activeNavigationLink,\n} from './styles';\nimport logo from '../../assets/images/Logo.png';\nimport { routes } from '../../router/routes';\n\nconst NavigationBar = () => {\n  return (\n    <div className={navigationBarContainer}>\n      <div className={logoContainer}>\n        <img src={logo} width=\"60px\" height=\"50px\" />\n      </div>\n      <NavLink\n        exact\n        to={routes.home}\n        className={navigationLink}\n        activeClassName={activeNavigationLink}\n      >\n        Home\n      </NavLink>\n      <NavLink\n        to={routes.gfs}\n        className={navigationLink}\n        activeClassName={activeNavigationLink}\n      >\n        GFS\n      </NavLink>\n      <NavLink\n        to={routes.satellites}\n        className={navigationLink}\n        activeClassName={activeNavigationLink}\n      >\n        Satellite Imagery\n      </NavLink>\n    </div>\n  );\n};\n\nexport default NavigationBar;\n","import {css} from 'emotion';\n\nexport const cardContainer = css`\n  background: #ffffff;\n  box-shadow: 0px 1px 10px 0px #888;\n  box-sizing: border-box;\n  padding: 25px;\n`;\n","import React, {ReactNode} from 'react';\nimport {cardContainer} from './styles';\ninterface CardProps {\n  styleOverrides?: {};\n  children?: ReactNode;\n}\n\nconst Card: React.FC = ({styleOverrides, children}: CardProps) => {\n  return (\n    <div className={cardContainer} style={styleOverrides}>\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport {css} from 'emotion';\nimport Card from '../../components/Card';\nconst centeredContainer = css`\n  display: flex;\n  flex-flow: row wrap;\n  flex-direction: column;\n  width: 80vw;\n  min-height: calc(100vh - 250px);\n  box-sizing: border-box;\n  margin: 25px auto;\n`;\n\nconst Home: React.FC = () => {\n  return (\n    <div className={centeredContainer}>\n      <Card>Home</Card>\n    </div>\n  );\n};\n\nexport default Home;\n","import {css} from 'emotion';\n\nexport const footerContainer = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100px;\n  box-shadow: 2px 0 5px 0px #888;\n  background: #efebff;\n  box-sizing: border-box;\n  color: #888;\n`;\n","import React from 'react';\nimport {footerContainer} from './styles';\n\nconst Footer = () => {\n  return (\n    <div className={footerContainer}>\n      <span>Copyright Tevin Brown</span>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, {useEffect, useRef, useState} from 'react';\nimport {css} from 'emotion';\nimport { useService } from '../../services/serviceHook';\nimport {RouteComponentProps, withRouter } from 'react-router-dom';\nimport { routes } from '../../router/routes';\n\nconst satelliteContainer = css`\n  display: flex;\n  flex-flow: row wrap;\n  flex-direction: column;\n  align-items: center;\n  width: 100vw;\n  min-height: 100vh;\n  box-sizing: border-box;\n`;\n\nconst image = css`\n  max-width:75%;\n  max-height:75%;\n`;\n\nconst imageContainer = css`\n  display: flex;\n  flex-flow: row wrap;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst satelliteLinkContainer = css`\n  display: flex;\n`;\n\nconst satelliteLink = css`\n  margin:8px;\n  &:hover {\n    cursor: pointer;\n    color: gray;\n  }\n`;\n\nconst satelliteLinkActive = css`\n  margin:8px;\n  color:blue;\n  &:hover {\n    cursor: pointer;\n    color: gray;\n  }\n`;\n\nconst button = css`\n  margin: 8px;\n`\n\nexport const routeMap:SatelliteDirectories = {\n  color_IR: 'Infared',\n  color_WV: 'Water Vapor',\n};\n\nexport interface SatelliteDirectories {\n  color_IR: string;\n  color_WV: string;\n}\n\nconst Satellites = ({location, history}:RouteComponentProps) => {\n  const {satelliteService} = useService()\n  const [images, setImages] = useState<string[]>()\n  const [imageIndex, setImageIndex] = useState<number>(0)\n  const img = useRef<HTMLImageElement>(null)\n  const directory = location.hash.slice(1)\n\n  const click = (key: keyof SatelliteDirectories) => {\n    var route = `${routes.satellites}#${key}`\n    history.push(route)\n  }\n\n  const imageClick = (cmd: 'previous' | 'next') => {\n    switch (cmd) {\n      case 'next':\n        if (images && (images?.length > imageIndex)) setImageIndex(imageIndex + 1)\n        break;\n      case 'previous':\n        if (imageIndex>0) setImageIndex(imageIndex - 1)\n        break;\n    }\n\n  }\n  \n  useEffect(() => {\n    if (Object.keys(routeMap).includes(directory)){\n      satelliteService.getDirectoryFiles(directory as keyof SatelliteDirectories).then(res => {\n        setImages(res.data.data);\n        setImageIndex(0);\n      })\n    }\n  }, [location]);\n\n  useEffect(()=>{\n    if(images){\n      satelliteService.getImage(directory,images[imageIndex]).then(res => {\n        var reader = new window.FileReader();\n        reader.readAsDataURL(res.data); \n        reader.onload = function() {\n\n            var imageDataUrl = reader.result as string;\n            img.current?.setAttribute(\"src\", imageDataUrl);\n\n        }\n      })\n    }\n  },[imageIndex,images])\n  \n  return (\n    <div className={satelliteContainer}>\n      <div className={satelliteLinkContainer}>\n        {Object.entries(routeMap).map(([key,value]) =>\n          <div className={directory===key ? satelliteLinkActive : satelliteLink} onClick={()=>click(key as keyof SatelliteDirectories)}>\n            {value}\n          </div>\n        )}\n      </div>\n      <div className={imageContainer}>\n          <img className={image} ref={img}/>\n          <div>\n            <button onClick={()=>imageClick('previous')} className={button}>Previous</button>\n            <button onClick={ ()=>imageClick('next')} className={button}>Next</button>\n          </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(Satellites);\n","import axios from 'axios';\nimport React, { useMemo } from 'react'\nimport { useAppState } from '../appContext';\nimport { SatelliteDirectories } from '../pages/Satallites/Satellites';\n\nexport const useService = () => {\n    const {config} = useAppState()\n\n    return useMemo(\n        () => ({\n          satelliteService: {\n            getSattelliteDirectories: async () =>\n                axios.get(config?.API_BASE_URL + '/satellites/list/all'),\n            getDirectoryFiles: async (directory: keyof SatelliteDirectories)  =>\n                axios.get(config?.API_BASE_URL + '/satellites/list/' + directory),\n            getImage: async (directory:string, filename:string) => \n                axios.get(`${config?.API_BASE_URL}/satellites/${directory}/${filename}`, { responseType:\"blob\" })\n          },\n        }),\n        [config],\n      );\n}","import React from 'react';\n\ntype Action =\n  | DirectoryAction\n\ninterface DirectoryAction {\n  type: 'setDirectory';\n  data: {directoryName: keyof State ,directories:string[]};\n}\n\ntype Dispatch = (action: Action) => void;\n\ntype SatelliteProviderProps = {children: React.ReactNode};\n\ninterface State {\n    ABI_GeoColor: string[],\n    ABI_TrueColor: string[],\n    color_IR: string[],\n    color_WV: string[],\n}\n\nconst initialState: State = {\n    ABI_GeoColor: [],\n    ABI_TrueColor: [],\n    color_IR: [],\n    color_WV: [],\n};\n\nconst SatelliteStateContext = React.createContext<State | undefined>(undefined);\n\nconst SatelliteDispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\nconst SatelliteReducer = (state: State, action: Action) => {\n  const newState = {...state};\n  switch (action.type) {\n    case 'setDirectory': {\n      newState[action.data.directoryName] = action.data.directories;\n      return newState;\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action}`);\n    }\n  }\n};\n\nconst SatelliteProvider = ({children}: SatelliteProviderProps) => {\n  const [state, dispatch] = React.useReducer(SatelliteReducer, initialState);\n  return (\n    <SatelliteStateContext.Provider value={state}>\n      <SatelliteDispatchContext.Provider value={dispatch}>\n        {children}\n      </SatelliteDispatchContext.Provider>\n    </SatelliteStateContext.Provider>\n  );\n};\n\nconst useSatelliteState = () => {\n  const context = React.useContext(SatelliteStateContext);\n  if (context === undefined) {\n    throw new Error('useSatelliteState must be used within a SatelliteProvider');\n  }\n  return context;\n};\n\nconst useSatelliteDispatch = () => {\n  const context = React.useContext(SatelliteDispatchContext);\n  if (context === undefined) {\n    throw new Error('useSatelliteDispatch must be used within a SatelliteProvider');\n  }\n  return context;\n};\nexport {SatelliteProvider, useSatelliteState, useSatelliteDispatch};\n","import React, {useEffect, useState} from 'react';\nimport {css} from 'emotion';\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\nimport NavigationBar from '../components/NavigationBar';\nimport Home from '../pages/Home';\nimport Footer from '../components/Footer';\nimport Satellites from '../pages/Satallites/Satellites';\nimport { AppProvider, useAppDispatch, useAppState } from '../appContext';\nimport { AppConfig } from '../appContext.definitions';\nimport Axios from 'axios';\nimport { SatelliteProvider } from '../pages/Satallites/satelliteContext';\nimport { routes } from './routes';\n\nconst appContainer = css`\n  background: #eeeeee;\n`;\n\nexport const AppRouter: React.FC = () => {\n  const {config} = useAppState()\n  const appDispatch = useAppDispatch()\n  \n  useEffect(()=>{\n    if (!config) {\n      Axios.get<AppConfig>(window.location.origin + '/config.json')\n        .then((res) => {\n            appDispatch({type: 'setConfig', data:res.data});\n        })\n    }\n  }, [])\n\n  return (<>\n    {config && (<Router>\n      <div className={appContainer}>\n        <NavigationBar />\n        <Switch>\n          <Route exact path={routes.home} component={Home} />\n          <Route path={routes.about}>\n            <div>About</div>\n          </Route>\n          <Route path={routes.gfs}>\n            <div>GFS Model</div>\n          </Route>\n          <SatelliteProvider>\n            <Route exact path={routes.satellites} component={Satellites} />\n          </SatelliteProvider>\n          <Route>\n            <div>This page was not found</div>\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>)}\n    </>\n  );\n};\n","import React from 'react'\nimport { AppProvider } from './appContext'\nimport { AppRouter } from './router/AppRouter'\n\nconst App = () => <AppProvider><AppRouter/></AppProvider>\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}